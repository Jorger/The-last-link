"use strict";let availableUsers=[];const rooms=[];module.exports={io:e=>{e.on("nU",(s,r)=>{const{type:o=1,localRoom:i="",table:a=!1,user:l="",createRoom:t=!1}=s;let d="";const n={error:!1,msg:""};let m=-1;const p=availableUsers.filter(e=>e.type===o);if(o>=1&&o<=3?1===o?m=0!==p.length?randomNumber(0,p.length-1):-1:2===o?m=p.findIndex(e=>e.room===i):3===o&&(a||t||(m=p.findIndex(e=>e.room===i))):(n.error=!0,n.msg="Game type is invalid"),!n.error)if(m>=0){let s=!1,r={};if(d=availableUsers[m].room,3!==o?(s=!0,r={p1:availableUsers[m].player,p2:{user:l,id:e.id}},e.join(d)):availableUsers[m]&&availableUsers[m].table?(availableUsers[m].player?(r={table:availableUsers[m].table,p1:availableUsers[m].player,p2:{user:l,id:e.id}},s=!0):availableUsers[m].player={user:l,id:e.id},e.join(d)):(n.error=!0,n.msg="There is no board"),s){const e=randomNumber(0,1);r.room=d,r.type=o,r.p1={...r.p1,color:e},r.p2={...r.p2,color:+!e},r.turn=randomNumber(0,1),rooms.push(r),availableUsers.splice(m,1),io.sockets.in(d).emit("sG",r)}}else{let s=!0;2!==o&&3!==o||t||(s=!1,n.error=!0,n.msg="The room does not exist"),s&&(d=1===o?guid():i,availableUsers.push({room:d,type:o,[3!==o?"player":"table"]:{user:l,id:e.id}}),e.join(d))}if(n.error)return r(n.msg);r()}),e.on("mV",e=>{if(4===e.type){const s=rooms.findIndex(s=>s.room===e.room);s>=0&&rooms.splice(s,1)}io.sockets.in(e.room).emit(["rV","aC","sT","gT","rE"][e.type-1],e)}),e.on("disconnect",()=>{const s=rooms.findIndex(({p1:s={id:""},p2:r={id:""},table:o={id:""}})=>s.id===e.id||r.id===e.id||o.id===e.id);if(s>=0)io.sockets.in(rooms[s].room).emit("gD",{roomData:rooms[s],userDisconnected:e.id,type:1}),rooms.splice(s,1);else{const s=availableUsers.findIndex(({player:s={id:""},table:r={id:""}})=>s.id===e.id||r.id===e.id);s>=0&&(3===availableUsers[s].type?availableUsers[s].table.id===e.id?(availableUsers[s].player&&io.sockets.in(availableUsers[s].room).emit("dT"),availableUsers.splice(s,1)):delete availableUsers[s].player:availableUsers.splice(s,1))}})}};